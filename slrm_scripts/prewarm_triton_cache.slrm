#!/bin/bash
#SBATCH --job-name=prewarm_triton
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=1
#SBATCH --cpus-per-task=8
#SBATCH --gpus-per-node=1
#SBATCH --mem=128GB
#SBATCH --partition=kempner
#SBATCH --account=kempner_bsabatini_lab
#SBATCH --time=0:30:00
#SBATCH --output=/n/home06/tbush/job_logs/%x.%j.out

set -euo pipefail

echo "=================================="
echo "Triton Cache Pre-warming Job"
echo "=================================="

# Load modules
module load python/3.12.8-fasrc01 gcc/14.2.0-fasrc01 cuda/12.9.1-fasrc01 cudnn/9.10.2.21_cuda12-fasrc01

# Activate Boltz environment
mamba activate /n/holylfs06/LABS/kempner_shared/Everyone/common_envs/miniconda3/envs/boltz

# Get version information for cache directory naming
BOLTZ_VERSION=$(python -c "import boltz; print(boltz.__version__)" 2>/dev/null || echo "unknown")
TRITON_VERSION=$(python -c "import triton; print(triton.__version__)" 2>/dev/null || echo "unknown")
PYTORCH_VERSION=$(python -c "import torch; print(torch.__version__)" 2>/dev/null || echo "unknown")
CUDA_VERSION=$(python -c "import torch; print(torch.version.cuda)" 2>/dev/null || echo "unknown")
GPU_ARCH=$(nvidia-smi --query-gpu=name --format=csv,noheader | head -n1 | tr ' ' '_')

# Create version-specific cache directory
CACHE_VERSION="${BOLTZ_VERSION}_triton${TRITON_VERSION}_pytorch${PYTORCH_VERSION}_cuda${CUDA_VERSION}_${GPU_ARCH}"

# Use home directory for cache storage
CACHE_BASE="$HOME/.boltz_triton_caches"
SHARED_CACHE="${CACHE_BASE}/${CACHE_VERSION}"

echo "Cache version: ${CACHE_VERSION}"
echo "Cache location: ${SHARED_CACHE}"
echo "Cache base: ${CACHE_BASE}"

# Check if cache already exists and is recent (less than 7 days old)
if [ -d "$SHARED_CACHE" ]; then
    CACHE_AGE=$(find "$SHARED_CACHE" -maxdepth 0 -mtime -7 2>/dev/null | wc -l)
    if [ "$CACHE_AGE" -eq 1 ]; then
        echo "Recent cache already exists (less than 7 days old)"
        echo "Cache location: $SHARED_CACHE"
        exit 0
    else
        echo "Cache exists but is older than 7 days, regenerating..."
        rm -rf "$SHARED_CACHE"
    fi
fi

# Create cache directory
mkdir -p "$SHARED_CACHE"

# Set environment variables for cache
export TRITON_CACHE_DIR="${SHARED_CACHE}/triton"
export TORCHINDUCTOR_CACHE_DIR="${SHARED_CACHE}/inductor"
export CUDA_CACHE_PATH="${SHARED_CACHE}/cuda"

mkdir -p "$TRITON_CACHE_DIR" "$TORCHINDUCTOR_CACHE_DIR" "$CUDA_CACHE_PATH"

# Create a minimal test FASTA file for warming
WARMUP_DIR="/tmp/triton_warmup_$$"
mkdir -p "$WARMUP_DIR"

# Create a small test protein sequence (ubiquitin - a commonly used test protein)
cat > "${WARMUP_DIR}/test_protein.fasta" << 'EOF'
>test_protein
MQIFVKTLTGKTITLEVEPSDTIENVKAKIQDKEGIPPDQQRLIFAGKQLEDGRTLSDYNIQKESTLHLVLRLRGG
EOF

# Set Boltz parameters
BOLTZ_CACHE="/n/holylfs06/LABS/kempner_shared/Everyone/workflow/boltz/boltz_db"
WARMUP_OUTPUT="${WARMUP_DIR}/output"
mkdir -p "$WARMUP_OUTPUT"

export CUDA_VISIBLE_DEVICES=0
export NUM_GPU_DEVICES=1

echo "Running Boltz prediction to warm up Triton cache..."
echo "This will compile all necessary GPU kernels..."

# Run a minimal prediction to trigger kernel compilation
boltz predict "${WARMUP_DIR}/test_protein.fasta" \
    --cache "$BOLTZ_CACHE" \
    --out_dir "$WARMUP_OUTPUT" \
    --devices $NUM_GPU_DEVICES \
    --accelerator gpu \
    --recycling_steps 3 \
    --diffusion_samples 1

if [ $? -eq 0 ]; then
    echo "Cache pre-warming successful!"
    
    # Write metadata file
    cat > "${SHARED_CACHE}/cache_info.txt" << EOF
Cache created: $(date)
Boltz version: ${BOLTZ_VERSION}
Triton version: ${TRITON_VERSION}
PyTorch version: ${PYTORCH_VERSION}
CUDA version: ${CUDA_VERSION}
GPU architecture: ${GPU_ARCH}
Job ID: ${SLURM_JOB_ID}
User: ${USER}
EOF
    
    # Display cache size
    echo "Cache size: $(du -sh "$SHARED_CACHE" | cut -f1)"
    echo "Cache location: $SHARED_CACHE"
    
    # Create a symlink to "latest" for convenience
    ln -sfn "$SHARED_CACHE" "${CACHE_BASE}/latest"
    
else
    echo "ERROR: Cache pre-warming failed!"
    rm -rf "$SHARED_CACHE"
    exit 1
fi

# Cleanup warmup directory
rm -rf "$WARMUP_DIR"

echo "=================================="
echo "Pre-warming complete!"
echo "=================================="

